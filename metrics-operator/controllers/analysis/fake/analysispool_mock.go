// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"context"
	"sync"
)

// MyAnalysisPoolMock is a mock implementation of analysis.IAnalysisPool.
//
//	func TestSomethingThatUsesIAnalysisPool(t *testing.T) {
//
//		// make and configure a mocked analysis.IAnalysisPool
//		mockedIAnalysisPool := &MyAnalysisPoolMock{
//			CollectAnalysisResultsFunc: func() map[string]string {
//				panic("mock out the CollectAnalysisResults method")
//			},
//			DispatchObjectivesFunc: func(ctx context.Context)  {
//				panic("mock out the DispatchObjectives method")
//			},
//		}
//
//		// use mockedIAnalysisPool in code that requires analysis.IAnalysisPool
//		// and then make assertions.
//
//	}
type MyAnalysisPoolMock struct {
	// CollectAnalysisResultsFunc mocks the CollectAnalysisResults method.
	CollectAnalysisResultsFunc func() map[string]string

	// DispatchObjectivesFunc mocks the DispatchObjectives method.
	DispatchObjectivesFunc func(ctx context.Context)

	// calls tracks calls to the methods.
	calls struct {
		// CollectAnalysisResults holds details about calls to the CollectAnalysisResults method.
		CollectAnalysisResults []struct {
		}
		// DispatchObjectives holds details about calls to the DispatchObjectives method.
		DispatchObjectives []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCollectAnalysisResults sync.RWMutex
	lockDispatchObjectives     sync.RWMutex
}

// CollectAnalysisResults calls CollectAnalysisResultsFunc.
func (mock *MyAnalysisPoolMock) CollectAnalysisResults() map[string]string {
	if mock.CollectAnalysisResultsFunc == nil {
		panic("MyAnalysisPoolMock.CollectAnalysisResultsFunc: method is nil but IAnalysisPool.CollectAnalysisResults was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCollectAnalysisResults.Lock()
	mock.calls.CollectAnalysisResults = append(mock.calls.CollectAnalysisResults, callInfo)
	mock.lockCollectAnalysisResults.Unlock()
	return mock.CollectAnalysisResultsFunc()
}

// CollectAnalysisResultsCalls gets all the calls that were made to CollectAnalysisResults.
// Check the length with:
//
//	len(mockedIAnalysisPool.CollectAnalysisResultsCalls())
func (mock *MyAnalysisPoolMock) CollectAnalysisResultsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCollectAnalysisResults.RLock()
	calls = mock.calls.CollectAnalysisResults
	mock.lockCollectAnalysisResults.RUnlock()
	return calls
}

// DispatchObjectives calls DispatchObjectivesFunc.
func (mock *MyAnalysisPoolMock) DispatchObjectives(ctx context.Context) {
	if mock.DispatchObjectivesFunc == nil {
		panic("MyAnalysisPoolMock.DispatchObjectivesFunc: method is nil but IAnalysisPool.DispatchObjectives was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockDispatchObjectives.Lock()
	mock.calls.DispatchObjectives = append(mock.calls.DispatchObjectives, callInfo)
	mock.lockDispatchObjectives.Unlock()
	mock.DispatchObjectivesFunc(ctx)
}

// DispatchObjectivesCalls gets all the calls that were made to DispatchObjectives.
// Check the length with:
//
//	len(mockedIAnalysisPool.DispatchObjectivesCalls())
func (mock *MyAnalysisPoolMock) DispatchObjectivesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockDispatchObjectives.RLock()
	calls = mock.calls.DispatchObjectives
	mock.lockDispatchObjectives.RUnlock()
	return calls
}
