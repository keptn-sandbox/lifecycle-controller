commit f229a3206f865c3ce3b3504daa2dab5c945089be
Author: odubajDT <ondrej.dubaj@dynatrace.com>
Date:   Wed Nov 16 08:45:33 2022 +0100

    com
    
    Signed-off-by: odubajDT <ondrej.dubaj@dynatrace.com>

diff --git a/operator/test/component/workloadinstancecontroller_test.go b/operator/test/component/workloadinstancecontroller_test.go
index ec4ac39..1b50b5a 100644
--- a/operator/test/component/workloadinstancecontroller_test.go
+++ b/operator/test/component/workloadinstancecontroller_test.go
@@ -2,7 +2,9 @@ package component
 
 import (
 	"context"
+
 	klcv1alpha1 "github.com/keptn/lifecycle-toolkit/operator/api/v1alpha1"
+	"github.com/keptn/lifecycle-toolkit/operator/api/v1alpha1/common"
 	keptncontroller "github.com/keptn/lifecycle-toolkit/operator/controllers/common"
 	"github.com/keptn/lifecycle-toolkit/operator/controllers/keptnworkloadinstance"
 	. "github.com/onsi/ginkgo/v2"
@@ -110,6 +112,44 @@ var _ = Describe("KeptnWorkloadInstanceController", Ordered, func() {
 					g.Expect(wi.Status.CurrentPhase).To(BeEmpty())
 				}, "3s").Should(Succeed())
 			})
+			It("should be cancelled when pre-eval checks failed", func() {
+				wi = &klcv1alpha1.KeptnWorkloadInstance{
+					ObjectMeta: metav1.ObjectMeta{
+						Name:      name,
+						Namespace: namespace,
+					},
+					Spec: klcv1alpha1.KeptnWorkloadInstanceSpec{
+						KeptnWorkloadSpec: klcv1alpha1.KeptnWorkloadSpec{
+							Version: "2.0",
+							AppName: "test-app",
+						},
+						WorkloadName: "wi-test-app-wname",
+						TraceId:      map[string]string{"traceparent": "00-0f89f15e562489e2e171eca1cf9ba958-d2fa6dbbcbf7e29a-01"},
+					},
+					Status: klcv1alpha1.KeptnWorkloadInstanceStatus{
+						PreDeploymentStatus:           common.StateSucceeded,
+						PreDeploymentEvaluationStatus: common.StateFailed,
+					},
+				}
+				By("Creating WorkloadInstance")
+				err := k8sClient.Create(context.TODO(), wi)
+				Expect(err).To(BeNil())
+
+				By("Ensuring WorkloadInstance does not progress to next phase")
+				wiNameObj := types.NamespacedName{
+					Namespace: wi.Namespace,
+					Name:      wi.Name,
+				}
+				Eventually(func(g Gomega) {
+					wi := &klcv1alpha1.KeptnWorkloadInstance{}
+					err := k8sClient.Get(ctx, wiNameObj, wi)
+					g.Expect(err).To(BeNil())
+					g.Expect(wi).To(Not(BeNil()))
+					g.Expect(wi.Status.DeploymentStatus).To(BeEquivalentTo(common.StateCancelled))
+					g.Expect(wi.Status.PostDeploymentStatus).To(BeEquivalentTo(common.StateCancelled))
+					g.Expect(wi.Status.PostDeploymentEvaluationStatus).To(BeEquivalentTo(common.StateCancelled))
+				}, "3s").Should(Succeed())
+			})
 			AfterEach(func() {
 				// Remember to clean up the cluster after each test
 				k8sClient.Delete(ctx, appVersion)
