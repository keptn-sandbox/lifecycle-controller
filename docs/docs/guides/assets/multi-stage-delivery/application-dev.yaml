apiVersion: v1
kind: Namespace
metadata:
  annotations:
    keptn.sh/lifecycle-toolkit: enabled
  name: podtato-head
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: podtato-head-frontend
  namespace: podtato-head-dev
spec:
  selector:
    matchLabels:
      app: podtato-head-frontend
  template:
    metadata:
      labels:
        app: podtato-head-frontend
        app.kubernetes.io/name: podtato-head-frontend
        app.kubernetes.io/part-of: podtato-head
        app.kubernetes.io/version: {{ .Values.serviceVersion }}
    spec:
      containers:
        - image: ghcr.io/podtato-head/podtato-server:{{ .Values.serviceVersion }}
          name: podtato-head-service
          imagePullPolicy: Always
          ports:
            - containerPort: 9000
              name: http
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/part-of: podtato-head
  name: podtato-head-frontend
  namespace: podtato-head-dev
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 9000
      protocol: TCP
  selector:
    app: podtato-head-frontend
  type: ClusterIP
---
apiVersion: lifecycle.keptn.sh/v1beta1
kind: KeptnAppContext
metadata:
  name: podtato-head
  namespace: podtato-head-dev
spec:
  postDeploymentTasks:
    - post-deployment
  promotionTasks:
    - promote
  metadata:
    commitID: {{ .Values.commitID }}
---
apiVersion: lifecycle.keptn.sh/v1beta1
kind: KeptnTaskDefinition
metadata:
  name: promote
  namespace: podtato-head-dev
spec:
  function:
    secureParameters:
      secret: github-token
    inline:
      code: |
        import { Octokit, App } from "https://esm.sh/octokit?dts";
        
        let secureDataText = Deno.env.get("SECURE_DATA");
        let secureData;
        if (secureDataText != "") {
            secureData = JSON.parse(secureDataText);
        }
        
        let contextText = Deno.env.get("KEPTN_CONTEXT");
        let context;
        if (contextText != "") {
          context = JSON.parse(contextText);
        }
        
        const octokit = new Octokit({ auth: secureData.apiToken });
        
        try {
          await octokit.rest.actions.createWorkflowDispatch({
            owner: secureData.githubRepoOwner,
            repo: secureData.githubRepo,
            workflow_id: "promote.yml",
            ref: "main",
            inputs: {
              "traceParent": context.metadata.traceParent
            }
          });
        } catch (error) {
          console.log(error);
        } 
