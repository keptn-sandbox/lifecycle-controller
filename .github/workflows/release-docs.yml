name: Release Documentation

on:
  pull_request:
    branches:
      - 'main'
  workflow_call:
    inputs:
      tag_name:
        description: "Tag for the functions runner image"
        type: "string"
        required: true
        default: "debug"
      dry_run:
        description: "Flag for testing"
        type: "boolean"
        default: false
        required: false

env:
  PAGE_DIR: "./tmp/page"

defaults:
  run:
    shell: bash

jobs:
  release-docs:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout - page branch
        uses: actions/checkout@v3
        with:
          ref: "page"
          path: ${{ env.PAGE_DIR }}

      - name: Get Latest Release Information
        uses: octokit/request-action@v2.x
        id: latest_release
        with:
          route: GET /repos/:owner/:repository/releases/latest
          repository: lifecycle-toolkit
          owner: keptn
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect needed Folder Operations
        id: folder
        run: |
            CURRENT_VERSION=`cat ${{ env.PAGE_DIR }}/docs/content/en/docs/version || echo "unknown"`
            echo $CURRENT_VERSION
            if [[ "${{ fromJson(steps.latest_release.outputs.data).tag_name }}" == "${{ inputs.tag_name }}" ]]; then
              if [[ "${{ fromJson(steps.latest_release.outputs.data).tag_name }}" != "$CURRENT_VERSION" ]]; then
                echo "migrate=docs-$CURRENT_VERSION" >> $GITHUB_OUTPUT
              fi
              echo "name=docs" >> $GITHUB_OUTPUT
              echo "latest=true" >> $GITHUB_OUTPUT
            else
              echo "name=docs-${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
            fi
            ## remove after me
            echo "migrate=docs-debug" >> $GITHUB_OUTPUT
            echo "name=docs" >> $GITHUB_OUTPUT
            echo "latest=true" >> $GITHUB_OUTPUT

      - name: Move old latest release documentation folder
        if: ${{ steps.folder.outputs.migrate }}
        run: |
          FROM="${{ env.PAGE_DIR }}/docs/content/en/docs"
          TO="${{ env.PAGE_DIR }}/docs/content/en/${{ steps.folder.outputs.migrate }}"
          echo "Moving ${FROM} -> ${TO}" 
          cp -R $FROM $TO
          rm -rf $FROM

      - name: Copy configuration
        if: ${{ steps.folder.outputs.latest }}
        run: |
          cp ./docs/* "${{ env.PAGE_DIR }}/docs" || true

      - name: Copy documentation folder
        run: |
            cp -R ./docs/content/en/docs "${{ env.PAGE_DIR }}/docs/content/en/${{ steps.folder.outputs.name}}"
            echo "${{ inputs.tag_name }}" > "${{ env.PAGE_DIR }}/docs/content/en/${{ steps.folder.outputs.name}}/version"
            sed -i 's/currentversion: main/currentversion: ${{ inputs.tag_name }}/g' "${{ env.PAGE_DIR }}/docs/content/en/${{ steps.folder.outputs.name}}/_index.md"

      - name: Check results
        run: |
          tree -d ${{ env.PAGE_DIR }}/docs/content/en/docs
          diff -r -q ./docs/content/en/docs ${{ env.PAGE_DIR }}/docs/content/en/docs
          # verify that the dev branch is exactly what we push to live

#      - name: Push content
#        if: ${{ inputs.dry_run != true }}
#        uses: EndBug/add-and-commit@v9
#        with:
#          default_author: github_actions
#          cwd: ${{ inputs.page_dir }}
#          message: "releasing documentation ${{ inputs.tag_name }}"
