name: CI
on:
  # always execute docker build when something is pushed to main or a maintenance branch
  push:
    branches:
      - 'main'
      - '[0-9]+.[1-9][0-9]*.x'
  # in addition, execute for pull requests to those branches
  pull_request:
    branches:
      - 'main'
      - '[0-9]+.[1-9][0-9]*.x'
env:
  GO_VERSION: "~1.18"
  LFC_SCHEDULER_ARTIFACT: "lfc-scheduler"
  OPERATOR_ARTIFACT: "operator"
defaults:
  run:
    shell: bash
jobs:
  prepare_ci_run:
    name: Prepare CI Run
    runs-on: ubuntu-20.04
    outputs:
      # metadata
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      DATE: ${{ steps.get_datetime.outputs.DATE }}
      TIME: ${{ steps.get_datetime.outputs.TIME }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}
      LFC_SCHEDULER_ARTIFACT: ${{ steps.get_artifacts.outputs.LFC_SCHEDULER_ARTIFACT }}
      OPERATOR_ARTIFACT: ${{ steps.get_artifacts.outputs.OPERATOR_ARTIFACT }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Extract branch name
        id: extract_branch
        # see https://github.com/keptn/gh-action-extract-branch-name for details
        uses: keptn/gh-action-extract-branch-name@main

      - name: Print Branch name
        env:
          branch: ${{ steps.extract_branch.outputs.BRANCH }}
          branch_slug: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
        run: |
          echo $branch
          echo $branch_slug

      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"
      
      - name: Get artifacts
        id: get_artifacts
        env:
          LFC_SCHEDULER_ARTIFACT: ${{ env.LFC_SCHEDULER_ARTIFACT }}
          OPERATOR_ARTIFACT: ${{ env.OPERATOR_ARTIFACT }}
        run: |
          echo "::set-output name=LFC_SCHEDULER_ARTIFACT::$LFC_SCHEDULER_ARTIFACT"
          echo "::set-output name=OPERATOR_ARTIFACT::$OPERATOR_ARTIFACT"

  build:
    name: Build
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    strategy:
      matrix: 
        artifacts: 
          - ${{ needs.prepare_ci_run.outputs.LFC_SCHEDULER_ARTIFACT }}
          - ${{ needs.prepare_ci_run.outputs.OPERATOR_ARTIFACT }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build ${{ matrix.artifacts }}
        working-directory: ./${{ matrix.artifacts}}
        run: |
          make build

  test:
    name: Unit Tests
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    strategy:
      matrix: 
        artifacts: 
          - ${{ needs.prepare_ci_run.outputs.LFC_SCHEDULER_ARTIFACT }}
          - ${{ needs.prepare_ci_run.outputs.OPERATOR_ARTIFACT }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up gotestsum
        run: go install gotest.tools/gotestsum@v1.8.1

      - name: Test ${{ matrix.artifacts }}
        working-directory: ./${{ matrix.artifacts }}
        run: |
          go mod download
          gotestsum --no-color=false --format=testname -- -coverprofile=coverage.txt -covermode=atomic -v ./... 

  build_image:
    name: Build and push Docker Image
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    strategy:
      matrix: 
        artifacts: 
          - ${{ needs.prepare_ci_run.outputs.LFC_SCHEDULER_ARTIFACT }}
          - ${{ needs.prepare_ci_run.outputs.OPERATOR_ARTIFACT }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3  

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
          install: true

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: "ghcr.io"
        username: "keptn-bot"
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        # Key is named differently to avoid collision
        key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-multi-buildx

    - name: "Docker Build keptn/${{ matrix.artifacts }}"
      id: docker_build_image
      uses: docker/build-push-action@v3
      with:
        context: ${{ matrix.artifacts }}
        tags: |
          ghcr.io/keptn-lifecycle-controller/${{ matrix.artifacts }}:${{ env.VERSION }}
          ghcr.io/keptn-lifecycle-controller/${{ matrix.artifacts }}:${{ env.VERSION }}.${{ env.DATETIME }}
        build-args: |
          version=${{ env.VERSION }}
          buildTime=${{ env.DATETIME }}
          gitSha=${{ env.GIT_SHA }}
        push: false
        pull: true
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha, scope=${{ github.workflow }}
        cache-to: type=gha, scope=${{ github.workflow }}

