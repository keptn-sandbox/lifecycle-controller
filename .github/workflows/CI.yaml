name: CI
on:
  # always execute docker build when something is pushed to main or a maintenance branch
  push:
    branches:
      - 'main'
      - '[0-9]+.[1-9][0-9]*.x'
  # in addition, execute for pull requests to those branches
  pull_request:
    branches:
      - 'main'
      - '[0-9]+.[1-9][0-9]*.x'
env:
  GO_VERSION: "~1.18"

  FUNCTIONS_RUNTIME_SVC_ARTIFACT_PREFIX: "FUNCTIONS_RUNTIME_SVC"
  FUNCTIONS_RUNTIME_SVC_ARTIFACT: "functions-runtime"
  FUNCTIONS_RUNTIME_SVC_FOLDER: "functions-runtime/"
  SHOULD_RUN_FUNCTIONS_RUNTIME_SVC: "false"
  
  LFC_SCHEDULER_SVC_ARTIFACT_PREFIX: "LFC_SCHEDULER_SVC"
  LFC_SCHEDULER_SVC_ARTIFACT: "scheduler"
  LFC_SCHEDULER_SVC_FOLDER: "scheduler/"

  OPERATOR_SVC_ARTIFACT_PREFIX: "OPERATOR_SVC"
  OPERATOR_SVC_ARTIFACT: "keptn-lifecycle-operator"
  OPERATOR_SVC_FOLDER: "operator/"
defaults:
  run:
    shell: bash
jobs:
  prepare_ci_run:
    name: Prepare CI Run
    runs-on: ubuntu-20.04
    outputs:
      # metadata
      BUILD_EVERYTHING: ${{ steps.build_everything.outputs.BUILD_EVERYTHING }}
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      DATE: ${{ steps.get_datetime.outputs.DATE }}
      TIME: ${{ steps.get_datetime.outputs.TIME }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}
      BUILD_MATRIX: ${{ steps.check_modified_files.outputs.BUILD_MATRIX }}
      BUILD_MATRIX_EMPTY: ${{ steps.check_modified_files.outputs.BUILD_MATRIX_EMPTY }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true

      - name: Prepare for build-everything run
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (contains(github.event.pull_request.labels.*.name, 'CI:trigger-build-everything')) || contains(github.event.pull_request.labels.*.name, format('autorelease{0} pending', ':'))
        id: build_everything
        run: |
          BUILD_EVERYTHING=true
          echo "##[set-output name=BUILD_EVERYTHING;]$(echo ${BUILD_EVERYTHING})"

      - name: Prepare artifacts with changes
        id: check_modified_files
        env:
          BUILD_EVERYTHING: ${{ steps.build_everything.outputs.BUILD_EVERYTHING }}
          GITHUB_REF_PROTECTED: ${{ env.GITHUB_REF_PROTECTED }}
        run: |
          ./gh-actions-scripts/prepare_changed_artifacts.sh "${{ steps.changed_files.outputs.all }}"

      - name: Extract branch name
        id: extract_branch
        # see https://github.com/keptn/gh-action-extract-branch-name for details
        uses: keptn/gh-action-extract-branch-name@main

      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"

  compile:
    name: Compile
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    strategy:
      matrix: ${{ fromJson(needs.prepare_ci_run.outputs.BUILD_MATRIX) }}
    steps:
      - name: Check out code
        if: matrix.config.should-run == 'true'
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        if: matrix.config.should-run == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Compile ${{ matrix.config.artifact }}
        if: matrix.config.should-run == 'true'
        working-directory: ./${{ matrix.config.working-dir }}
        run: |
          make build

  test:
    name: Unit Tests
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJson(needs.prepare_ci_run.outputs.BUILD_MATRIX) }}
    steps:
      - name: Check out code
        if: matrix.config.should-run == 'true'
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        if: matrix.config.should-run == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test ${{ matrix.config.artifact }}
        if: matrix.config.should-run == 'true'
        working-directory: ./${{ matrix.config.working-dir }}
        run: |
          make test

  build_image:
    name: Build and push Docker Image
    needs: [prepare_ci_run, compile, test]
    runs-on: ubuntu-20.04
    permissions:
      packages: write # Needed for pushing images to the registry
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    strategy:
      matrix: ${{ fromJson(needs.prepare_ci_run.outputs.BUILD_MATRIX) }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
          install: true

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: "ghcr.io"
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        # Key is named differently to avoid collision
        key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-multi-buildx

    - name: Build Docker Images
      working-directory: ./${{ matrix.config.working-dir }}
      run: |
        make release-image TAG=dev-${{ env.DATETIME }}

    - name: Push Docker Images
      if: ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && github.event.pull_request.head.repo.full_name == github.repository
      working-directory: ./${{ matrix.config.working-dir }}
      run: |
        make push-release-images TAG=dev-${{ env.DATETIME }}

    - name: Install controller-gen
      if: matrix.config.artifact == 'keptn-lifecycle-operator' && ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && github.event.pull_request.head.repo.full_name == github.repository
      working-directory: ./${{ matrix.config.working-dir }}
      run: make controller-gen

    - name: Generate release.yaml
      if: matrix.config.artifact != 'functions-runtime' && ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && github.event.pull_request.head.repo.full_name == github.repository
      working-directory: ./${{ matrix.config.working-dir }}
      run: make release-manifests TAG=dev-${{ env.DATETIME }}

    - name: Upload release.yaml
      if: matrix.config.artifact != 'functions-runtime' && ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && github.event.pull_request.head.repo.full_name == github.repository
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}-manifest
        path: ${{ matrix.config.working-dir }}/config/rendered/release.yaml
